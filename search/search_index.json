{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"alphavantage-java \u00b6 This library was created to provide a fluent interface for accessing the AlphaVantage API with Java. Getting Started \u00b6 To get started using this library, make sure to get an API Key from Alphavantage's website. Add the library as a dependency to your java/android project Gradle Installation \u00b6 allprojects { repositories { ... maven { url 'https://jitpack.io' } } } dependencies { ... implementation 'com.github.crazzyghost:alphavantage-java:x.y.z' } Maven Installation \u00b6 <repositories> ... <repository> <id> jitpack.io </id> <url> https://jitpack.io </url> </repository> ... </repositories> <dependencies> ... <dependency> <groupId> com.github.crazzyghost </groupId> <artifactId> alphavantage-java </artifactId> <version> x.y.z </version> </dependency> ... </dependencies> Quick Usage Guide \u00b6 These five steps summarize how to access data using this library config ure the wrapper Select a category Set the parameters for the selected category Add response callbacks fetch results 1. Config uring the wrapper \u00b6 Access to the API is through the AlphaVantage Singleton which is accessed using the static api() method of the class. Tip Initialize the singleton with a Config instance once through out your apps lifetime. Java Config cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build (); Kotlin var cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build () The config object is then used to initialize the instance. You will use this object to set your api key and configure the http client. Warning Using the wrapper without setting a config or a config key will throw an exception. Java AlphaVantage . api (). init ( cfg ); Kotlin AlphaVantage . api (). init ( cfg ) That's it! We're good to go. 2. Selecting a category \u00b6 The available API categories to select from currently are: Stock Time Series, Foreign Exchange(FX), Digital Currencies, Exchange Rates and Technical Indicators. Info Each of these categories is exposed through a method call in the instantiated wrapper. Category Method Stock Time Series Data .timeSeries() Forex Rate Data .forex() Exchange Rate Data .exchangeRate() Digital Currency Data .crypto() Technical Indicator Data .indicator() For example, to select the Stock Time Series: Java AlphaVantage . api () . timeSeries () Kotlin AlphaVantage . api () . timeSeries () 3. Setting the parameters for the selected category \u00b6 To set the api request parameters, call the appopriate parameter methods. For instance for the function parameter function you call daily() for the TIME_SERIES_DAILY function, intraday() for the TIME_SERIES_INTRADAY , and so on. Let's select the TIME_SERIES_INTRADAY function Java AlphaVantage . api () . timeSeries () . intraday () ... Kotlin AlphaVantage . api () . timeSeries () . intraday () ... Tip Start setting parameters by calling an appropriate function method in the selected category 4. Adding response callbacks \u00b6 To handle responses add the onSuccess() or onFailure() callbacks. Java public void handleSuccess ( TimeSeriesResponse response ) { plotGraph ( reponse . getStockUnits ()); } public void handleFailure ( AlphaVantageException error ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) ... Kotlin fun handleSuccess ( response : TimeSeriesResponse ) { plotGraph ( reponse . getStockUnits ()) } fun handleFailure ( error : AlphaVantageException ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) ... Info Callbacks are optional, you can choose to handle either or both 5. fetch results \u00b6 When you are okay with setting the parameters call the fetch() method. Simple! Java AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) . fetch (); Kotlin AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) . fetch () Releases \u00b6 Release history can be found in the change log . License \u00b6 MIT License Copyright (c) 2020 Sylvester Sefa-Yeboah Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Overview"},{"location":"#alphavantage-java","text":"This library was created to provide a fluent interface for accessing the AlphaVantage API with Java.","title":"alphavantage-java"},{"location":"#getting-started","text":"To get started using this library, make sure to get an API Key from Alphavantage's website. Add the library as a dependency to your java/android project","title":"Getting Started"},{"location":"#gradle-installation","text":"allprojects { repositories { ... maven { url 'https://jitpack.io' } } } dependencies { ... implementation 'com.github.crazzyghost:alphavantage-java:x.y.z' }","title":"Gradle Installation"},{"location":"#maven-installation","text":"<repositories> ... <repository> <id> jitpack.io </id> <url> https://jitpack.io </url> </repository> ... </repositories> <dependencies> ... <dependency> <groupId> com.github.crazzyghost </groupId> <artifactId> alphavantage-java </artifactId> <version> x.y.z </version> </dependency> ... </dependencies>","title":"Maven Installation"},{"location":"#quick-usage-guide","text":"These five steps summarize how to access data using this library config ure the wrapper Select a category Set the parameters for the selected category Add response callbacks fetch results","title":"Quick Usage Guide"},{"location":"#1-configuring-the-wrapper","text":"Access to the API is through the AlphaVantage Singleton which is accessed using the static api() method of the class. Tip Initialize the singleton with a Config instance once through out your apps lifetime. Java Config cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build (); Kotlin var cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build () The config object is then used to initialize the instance. You will use this object to set your api key and configure the http client. Warning Using the wrapper without setting a config or a config key will throw an exception. Java AlphaVantage . api (). init ( cfg ); Kotlin AlphaVantage . api (). init ( cfg ) That's it! We're good to go.","title":"1. Configuring the wrapper"},{"location":"#2-selecting-a-category","text":"The available API categories to select from currently are: Stock Time Series, Foreign Exchange(FX), Digital Currencies, Exchange Rates and Technical Indicators. Info Each of these categories is exposed through a method call in the instantiated wrapper. Category Method Stock Time Series Data .timeSeries() Forex Rate Data .forex() Exchange Rate Data .exchangeRate() Digital Currency Data .crypto() Technical Indicator Data .indicator() For example, to select the Stock Time Series: Java AlphaVantage . api () . timeSeries () Kotlin AlphaVantage . api () . timeSeries ()","title":"2. Selecting a category"},{"location":"#3-setting-the-parameters-for-the-selected-category","text":"To set the api request parameters, call the appopriate parameter methods. For instance for the function parameter function you call daily() for the TIME_SERIES_DAILY function, intraday() for the TIME_SERIES_INTRADAY , and so on. Let's select the TIME_SERIES_INTRADAY function Java AlphaVantage . api () . timeSeries () . intraday () ... Kotlin AlphaVantage . api () . timeSeries () . intraday () ... Tip Start setting parameters by calling an appropriate function method in the selected category","title":"3. Setting the parameters for the selected category"},{"location":"#4-adding-response-callbacks","text":"To handle responses add the onSuccess() or onFailure() callbacks. Java public void handleSuccess ( TimeSeriesResponse response ) { plotGraph ( reponse . getStockUnits ()); } public void handleFailure ( AlphaVantageException error ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) ... Kotlin fun handleSuccess ( response : TimeSeriesResponse ) { plotGraph ( reponse . getStockUnits ()) } fun handleFailure ( error : AlphaVantageException ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) ... Info Callbacks are optional, you can choose to handle either or both","title":"4. Adding response callbacks"},{"location":"#5-fetch-results","text":"When you are okay with setting the parameters call the fetch() method. Simple! Java AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) . fetch (); Kotlin AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) . fetch ()","title":"5.  fetch results"},{"location":"#releases","text":"Release history can be found in the change log .","title":"Releases"},{"location":"#license","text":"MIT License Copyright (c) 2020 Sylvester Sefa-Yeboah Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 v1.3.0 - 09-05-2020 \u00b6 New: Support for Quote Endpoint Changed: RequestHelper to RequestProxy for TimeSeries Fix: Time Series IntradayRequest interval bug v1.2.1 - 07-05-2020 \u00b6 Fix: Forex IntradayRequest interval bug v1.2.0 - 05-05-2020 \u00b6 New: Support for crypto currency Health Index v1.1.1 - 04-05-2020 \u00b6 New: Bid Rates and Ask Rates for Exchange Rates Fix: Exchange Rates response data access v1.1.0 - 04-05-2020 \u00b6 New: Support for Technical Indicators v1.0.2 - 24-04-2020 \u00b6 Fix: API url parameter bug v1.0.1 - 17-04-2020 \u00b6 Fix: Incorrect mapping of time series data Fix: Getters for Crypto and Forex Units Change: Rename crypto subpackages v1.0.0 - 23-10-2019 \u00b6 New: Support for Time Series Data New:Support for Forex Data New:Support for Crypto Currencies New:Support for Exchange Rates New:Tests for Time Series","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v130-09-05-2020","text":"New: Support for Quote Endpoint Changed: RequestHelper to RequestProxy for TimeSeries Fix: Time Series IntradayRequest interval bug","title":"v1.3.0 - 09-05-2020"},{"location":"changelog/#v121-07-05-2020","text":"Fix: Forex IntradayRequest interval bug","title":"v1.2.1 - 07-05-2020"},{"location":"changelog/#v120-05-05-2020","text":"New: Support for crypto currency Health Index","title":"v1.2.0 - 05-05-2020"},{"location":"changelog/#v111-04-05-2020","text":"New: Bid Rates and Ask Rates for Exchange Rates Fix: Exchange Rates response data access","title":"v1.1.1 - 04-05-2020"},{"location":"changelog/#v110-04-05-2020","text":"New: Support for Technical Indicators","title":"v1.1.0 - 04-05-2020"},{"location":"changelog/#v102-24-04-2020","text":"Fix: API url parameter bug","title":"v1.0.2 - 24-04-2020"},{"location":"changelog/#v101-17-04-2020","text":"Fix: Incorrect mapping of time series data Fix: Getters for Crypto and Forex Units Change: Rename crypto subpackages","title":"v1.0.1 - 17-04-2020"},{"location":"changelog/#v100-23-10-2019","text":"New: Support for Time Series Data New:Support for Forex Data New:Support for Crypto Currencies New:Support for Exchange Rates New:Tests for Time Series","title":"v1.0.0 - 23-10-2019"},{"location":"crypto/","text":"Digital Currencies \u00b6 Defaults \u00b6 dataType: DataType.JSON Daily \u00b6 Java Alphavantage . api () . crypto () . daily () . forSymbol ( \"BTC\" ) . market ( \"CNY\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch (); Weekly \u00b6 Java Alphavantage . api () . crypto () . weekly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch (); Monthly \u00b6 Java Alphavantage . api () . crypto () . monthly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch (); Response Type \u00b6 CryptoResponse Health Index \u00b6 Java Alphavantage . api () . crypto () . rating () . forSymbol ( \"BTC\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type \u00b6 RatingResponse","title":"CryptoCurrencies"},{"location":"crypto/#digital-currencies","text":"","title":"Digital Currencies"},{"location":"crypto/#defaults","text":"dataType: DataType.JSON","title":"Defaults"},{"location":"crypto/#daily","text":"Java Alphavantage . api () . crypto () . daily () . forSymbol ( \"BTC\" ) . market ( \"CNY\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch ();","title":"Daily"},{"location":"crypto/#weekly","text":"Java Alphavantage . api () . crypto () . weekly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch ();","title":"Weekly"},{"location":"crypto/#monthly","text":"Java Alphavantage . api () . crypto () . monthly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch ();","title":"Monthly"},{"location":"crypto/#response-type","text":"CryptoResponse","title":"Response Type"},{"location":"crypto/#health-index","text":"Java Alphavantage . api () . crypto () . rating () . forSymbol ( \"BTC\" ) . onSuccess ( e -> onData ( e )) . fetch ();","title":"Health Index"},{"location":"crypto/#response-type_1","text":"RatingResponse","title":"Response Type"},{"location":"exchangerate/","text":"Request \u00b6 Java AlphaVantage . api () . exchangeRate () . fromCurrency ( \"USD\" ) . toCurrency ( \"GHS\" ) . onSuccess (( e ) -> onData ( e )) . fetch (); Response Type \u00b6 ExchangeRateResponse","title":"Exchange Rates"},{"location":"exchangerate/#request","text":"Java AlphaVantage . api () . exchangeRate () . fromCurrency ( \"USD\" ) . toCurrency ( \"GHS\" ) . onSuccess (( e ) -> onData ( e )) . fetch ();","title":"Request"},{"location":"exchangerate/#response-type","text":"ExchangeRateResponse","title":"Response Type"},{"location":"forex/","text":"Defaults \u00b6 interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON Intraday \u00b6 Java Alphavantage . api () . forex () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Daily \u00b6 Java Alphavantage . api () . forex () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Weekly \u00b6 Java Alphavantage . api () . forex () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Monthly \u00b6 Java Alphavantage . api () . forex () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Response Type \u00b6 ForexResponse","title":"Forex (FX)"},{"location":"forex/#defaults","text":"interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON","title":"Defaults"},{"location":"forex/#intraday","text":"Java Alphavantage . api () . forex () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch ();","title":"Intraday"},{"location":"forex/#daily","text":"Java Alphavantage . api () . forex () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch ();","title":"Daily"},{"location":"forex/#weekly","text":"Java Alphavantage . api () . forex () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch ();","title":"Weekly"},{"location":"forex/#monthly","text":"Java Alphavantage . api () . forex () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch ();","title":"Monthly"},{"location":"forex/#response-type","text":"ForexResponse","title":"Response Type"},{"location":"indicators/","text":"Note All Indicator Response provide a getIndicatorUnits() method to acess technical indicator data and getMetaData() to access metadata information SMA \u00b6 Java AlphaVantage . api () . indicator () . sma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse EMA \u00b6 Java AlphaVantage . api () . indicator () . ema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse WMA \u00b6 Java AlphaVantage . api () . indicator () . wma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse DEMA \u00b6 Java AlphaVantage . api () . indicator () . dema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse TEMA \u00b6 Java AlphaVantage . api () . indicator () . tema () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse TRIMA \u00b6 Java AlphaVantage . api () . indicator () . trima () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse KAMA \u00b6 Java AlphaVantage . api () . indicator () . kama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse MAMA \u00b6 Java AlphaVantage . api () . indicator () . mama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . fastLimit ( 0.1 ) . slowLimit ( 0.5 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MAMAResponse VWAP \u00b6 Java AlphaVantage . api () . indicator () . vwap () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse T3 \u00b6 Java AlphaVantage . api () . indicator () . t3 () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse MACD \u00b6 Java AlphaVantage . api () . indicator () . macd () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDResponse MACDEXT \u00b6 Java AlphaVantage . api () . indicator () . macdext () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . slowMaType ( MAType . SMA ) . fastMaType ( MAType . MAMA ) . signalMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDEXTResponse STOCH \u00b6 Java AlphaVantage . api () . indicator () . stoch () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . slowKPeriod ( 3 ) . slowDPeriod ( 3 ) . slowKMaType ( MAType . SMA ) . slowDMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHResponse STOCHF \u00b6 Java AlphaVantage . api () . indicator () . stochf () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHFResponse RSI \u00b6 Java AlphaVantage . api () . indicator () . rsi () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse STOCHRSI \u00b6 Java AlphaVantage . api () . indicator () . stochrsi () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHRSIResponse WILLR \u00b6 Java AlphaVantage . api () . indicator () . willr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse ADX \u00b6 Java AlphaVantage . api () . indicator () . adx () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse ADXR \u00b6 Java AlphaVantage . api () . indicator () . adxr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse PPO \u00b6 Java AlphaVantage . api () . indicator () . ppo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse APO \u00b6 Java AlphaVantage . api () . indicator () . apo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse MOM \u00b6 Java AlphaVantage . api () . indicator () . mom () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse BOP \u00b6 Java AlphaVantage . api () . indicator () . bop () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse CCI \u00b6 Java AlphaVantage . api () . indicator () . cci () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse CMO \u00b6 Java AlphaVantage . api () . indicator () . cmo () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse ROC \u00b6 Java AlphaVantage . api () . indicator () . roc () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse ROCR \u00b6 Java AlphaVantage . api () . indicator () . rocr () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse AROON \u00b6 Java AlphaVantage . api () . indicator () . aroon () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: AROONResponse AROONOSC \u00b6 Java AlphaVantage . api () . indicator () . aroonosc () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse MFI \u00b6 Java AlphaVantage . api () . indicator () . mfi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse TRIX \u00b6 Java AlphaVantage . api () . indicator () . trix () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse ULTOSC \u00b6 Java AlphaVantage . api () . indicator () . ultosc () . interval ( Interval . SIXTY_MIN ) . timePeriod1 ( 7 ) . timePeriod2 ( 14 ) . timePeriod3 ( 28 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ULTOSCResponse DX \u00b6 Java AlphaVantage . api () . indicator () . dx () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse MINUS_DI \u00b6 Java AlphaVantage . api () . indicator () . minusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse PLUS_DI \u00b6 Java AlphaVantage . api () . indicator () . plusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse MINUS_DM \u00b6 Java AlphaVantage . api () . indicator () . minusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse PLUS_DM \u00b6 Java AlphaVantage . api () . indicator () . plusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse BBANDS \u00b6 Java AlphaVantage . api () . indicator () . bbands () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . seriesType ( SeriesType . OPEN ) . nbdevdn ( 4 ) . nbdevup ( 4 ) . maType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: BBANDSResponse MIDPOINT \u00b6 Java AlphaVantage . api () . indicator () . midpoint () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse MIDPRICE \u00b6 Java AlphaVantage . api () . indicator () . midprice () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse SAR \u00b6 Java AlphaVantage . api () . indicator () . sar () . interval ( Interval . DAILY ) . acceleration ( 0.02 ) . maximum ( 0.50 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SARResponse TRANGE \u00b6 Java AlphaVantage . api () . indicator () . trange () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse ATR \u00b6 Java AlphaVantage . api () . indicator () . atr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse NATR \u00b6 Java AlphaVantage . api () . indicator () . natr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse AD \u00b6 Java AlphaVantage . api () . indicator () . ad () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse ADOSC \u00b6 Java AlphaVantage . api () . indicator () . adosc () . interval ( Interval . WEEKLY ) . fastPeriod ( 3 ) . slowPeriod ( 10 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ADOSCResponse OBV \u00b6 Java AlphaVantage . api () . indicator () . obv () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse HT_TRENDLINE \u00b6 Java AlphaVantage . api () . indicator () . httrendline () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_SINE \u00b6 Java AlphaVantage . api () . indicator () . htsine () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTSINEResponse HT_TRENDMODE \u00b6 Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_DCPERIOD \u00b6 Java AlphaVantage . api () . indicator () . htdcperiod () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_DCPHASE \u00b6 Java AlphaVantage . api () . indicator () . htdcphase () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_PHASOR \u00b6 Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTPHASORResponse","title":"Technical Indicators"},{"location":"indicators/#sma","text":"Java AlphaVantage . api () . indicator () . sma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"SMA"},{"location":"indicators/#ema","text":"Java AlphaVantage . api () . indicator () . ema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"EMA"},{"location":"indicators/#wma","text":"Java AlphaVantage . api () . indicator () . wma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"WMA"},{"location":"indicators/#dema","text":"Java AlphaVantage . api () . indicator () . dema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"DEMA"},{"location":"indicators/#tema","text":"Java AlphaVantage . api () . indicator () . tema () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"TEMA"},{"location":"indicators/#trima","text":"Java AlphaVantage . api () . indicator () . trima () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"TRIMA"},{"location":"indicators/#kama","text":"Java AlphaVantage . api () . indicator () . kama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"KAMA"},{"location":"indicators/#mama","text":"Java AlphaVantage . api () . indicator () . mama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . fastLimit ( 0.1 ) . slowLimit ( 0.5 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MAMAResponse","title":"MAMA"},{"location":"indicators/#vwap","text":"Java AlphaVantage . api () . indicator () . vwap () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"VWAP"},{"location":"indicators/#t3","text":"Java AlphaVantage . api () . indicator () . t3 () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"T3"},{"location":"indicators/#macd","text":"Java AlphaVantage . api () . indicator () . macd () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDResponse","title":"MACD"},{"location":"indicators/#macdext","text":"Java AlphaVantage . api () . indicator () . macdext () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . slowMaType ( MAType . SMA ) . fastMaType ( MAType . MAMA ) . signalMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDEXTResponse","title":"MACDEXT"},{"location":"indicators/#stoch","text":"Java AlphaVantage . api () . indicator () . stoch () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . slowKPeriod ( 3 ) . slowDPeriod ( 3 ) . slowKMaType ( MAType . SMA ) . slowDMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHResponse","title":"STOCH"},{"location":"indicators/#stochf","text":"Java AlphaVantage . api () . indicator () . stochf () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHFResponse","title":"STOCHF"},{"location":"indicators/#rsi","text":"Java AlphaVantage . api () . indicator () . rsi () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"RSI"},{"location":"indicators/#stochrsi","text":"Java AlphaVantage . api () . indicator () . stochrsi () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHRSIResponse","title":"STOCHRSI"},{"location":"indicators/#willr","text":"Java AlphaVantage . api () . indicator () . willr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"WILLR"},{"location":"indicators/#adx","text":"Java AlphaVantage . api () . indicator () . adx () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"ADX"},{"location":"indicators/#adxr","text":"Java AlphaVantage . api () . indicator () . adxr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"ADXR"},{"location":"indicators/#ppo","text":"Java AlphaVantage . api () . indicator () . ppo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse","title":"PPO"},{"location":"indicators/#apo","text":"Java AlphaVantage . api () . indicator () . apo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse","title":"APO"},{"location":"indicators/#mom","text":"Java AlphaVantage . api () . indicator () . mom () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"MOM"},{"location":"indicators/#bop","text":"Java AlphaVantage . api () . indicator () . bop () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"BOP"},{"location":"indicators/#cci","text":"Java AlphaVantage . api () . indicator () . cci () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"CCI"},{"location":"indicators/#cmo","text":"Java AlphaVantage . api () . indicator () . cmo () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"CMO"},{"location":"indicators/#roc","text":"Java AlphaVantage . api () . indicator () . roc () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"ROC"},{"location":"indicators/#rocr","text":"Java AlphaVantage . api () . indicator () . rocr () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"ROCR"},{"location":"indicators/#aroon","text":"Java AlphaVantage . api () . indicator () . aroon () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: AROONResponse","title":"AROON"},{"location":"indicators/#aroonosc","text":"Java AlphaVantage . api () . indicator () . aroonosc () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"AROONOSC"},{"location":"indicators/#mfi","text":"Java AlphaVantage . api () . indicator () . mfi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MFI"},{"location":"indicators/#trix","text":"Java AlphaVantage . api () . indicator () . trix () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"TRIX"},{"location":"indicators/#ultosc","text":"Java AlphaVantage . api () . indicator () . ultosc () . interval ( Interval . SIXTY_MIN ) . timePeriod1 ( 7 ) . timePeriod2 ( 14 ) . timePeriod3 ( 28 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ULTOSCResponse","title":"ULTOSC"},{"location":"indicators/#dx","text":"Java AlphaVantage . api () . indicator () . dx () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"DX"},{"location":"indicators/#minus_di","text":"Java AlphaVantage . api () . indicator () . minusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MINUS_DI"},{"location":"indicators/#plus_di","text":"Java AlphaVantage . api () . indicator () . plusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"PLUS_DI"},{"location":"indicators/#minus_dm","text":"Java AlphaVantage . api () . indicator () . minusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MINUS_DM"},{"location":"indicators/#plus_dm","text":"Java AlphaVantage . api () . indicator () . plusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"PLUS_DM"},{"location":"indicators/#bbands","text":"Java AlphaVantage . api () . indicator () . bbands () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . seriesType ( SeriesType . OPEN ) . nbdevdn ( 4 ) . nbdevup ( 4 ) . maType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: BBANDSResponse","title":"BBANDS"},{"location":"indicators/#midpoint","text":"Java AlphaVantage . api () . indicator () . midpoint () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"MIDPOINT"},{"location":"indicators/#midprice","text":"Java AlphaVantage . api () . indicator () . midprice () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MIDPRICE"},{"location":"indicators/#sar","text":"Java AlphaVantage . api () . indicator () . sar () . interval ( Interval . DAILY ) . acceleration ( 0.02 ) . maximum ( 0.50 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SARResponse","title":"SAR"},{"location":"indicators/#trange","text":"Java AlphaVantage . api () . indicator () . trange () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"TRANGE"},{"location":"indicators/#atr","text":"Java AlphaVantage . api () . indicator () . atr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"ATR"},{"location":"indicators/#natr","text":"Java AlphaVantage . api () . indicator () . natr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"NATR"},{"location":"indicators/#ad","text":"Java AlphaVantage . api () . indicator () . ad () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"AD"},{"location":"indicators/#adosc","text":"Java AlphaVantage . api () . indicator () . adosc () . interval ( Interval . WEEKLY ) . fastPeriod ( 3 ) . slowPeriod ( 10 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ADOSCResponse","title":"ADOSC"},{"location":"indicators/#obv","text":"Java AlphaVantage . api () . indicator () . obv () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"OBV"},{"location":"indicators/#ht_trendline","text":"Java AlphaVantage . api () . indicator () . httrendline () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_TRENDLINE"},{"location":"indicators/#ht_sine","text":"Java AlphaVantage . api () . indicator () . htsine () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTSINEResponse","title":"HT_SINE"},{"location":"indicators/#ht_trendmode","text":"Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_TRENDMODE"},{"location":"indicators/#ht_dcperiod","text":"Java AlphaVantage . api () . indicator () . htdcperiod () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_DCPERIOD"},{"location":"indicators/#ht_dcphase","text":"Java AlphaVantage . api () . indicator () . htdcphase () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_DCPHASE"},{"location":"indicators/#ht_phasor","text":"Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTPHASORResponse","title":"HT_PHASOR"},{"location":"timeseries/","text":"Time Series \u00b6 Defaults \u00b6 interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON Intraday \u00b6 Java Alphavantage . api () . timeSeries () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Daily \u00b6 Java Alphavantage . api () . timeSeries () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Daily Adjusted \u00b6 Java Alphavantage . api () . timeSeries () . daily () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Weekly \u00b6 Java Alphavantage . api () . timeSeries () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Weekly Adjusted \u00b6 Java Alphavantage . api () . timeSeries () . weekly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Monthly \u00b6 Java Alphavantage . api () . timeSeries () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Monthly Adjusted \u00b6 Java Alphavantage . api () . timeSeries () . monthly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type \u00b6 TimeSeriesResponse Quote Endpoint \u00b6 Java Alphavantage . api () . timeSeries () . quote () . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type \u00b6 QuoteResponse","title":"Stock Time Series"},{"location":"timeseries/#time-series","text":"","title":"Time Series"},{"location":"timeseries/#defaults","text":"interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON","title":"Defaults"},{"location":"timeseries/#intraday","text":"Java Alphavantage . api () . timeSeries () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch ();","title":"Intraday"},{"location":"timeseries/#daily","text":"Java Alphavantage . api () . timeSeries () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch ();","title":"Daily"},{"location":"timeseries/#daily-adjusted","text":"Java Alphavantage . api () . timeSeries () . daily () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch ();","title":"Daily Adjusted"},{"location":"timeseries/#weekly","text":"Java Alphavantage . api () . timeSeries () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch ();","title":"Weekly"},{"location":"timeseries/#weekly-adjusted","text":"Java Alphavantage . api () . timeSeries () . weekly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch ();","title":"Weekly Adjusted"},{"location":"timeseries/#monthly","text":"Java Alphavantage . api () . timeSeries () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch ();","title":"Monthly"},{"location":"timeseries/#monthly-adjusted","text":"Java Alphavantage . api () . timeSeries () . monthly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch ();","title":"Monthly Adjusted"},{"location":"timeseries/#response-type","text":"TimeSeriesResponse","title":"Response Type"},{"location":"timeseries/#quote-endpoint","text":"Java Alphavantage . api () . timeSeries () . quote () . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch ();","title":"Quote Endpoint"},{"location":"timeseries/#response-type_1","text":"QuoteResponse","title":"Response Type"}]}